#!/bin/sh
# start Tcl-Interpreter \
exec tclsh "$0" "$@"

########################################################################
##                                                                    ##
##                           CUE2PSC                                  ##
##                                                                    ##
## NAME                                                               ##
##        cue to psc - converts a cue sheet into a podlove simple     ##
##                                                   chapter file     ##
##                                                                    ##
## SYNOPSIS                                                           ##
##        tclsh8.5 cue2psc.tcl [inputfile] [outputfile]               ##
##                                                                    ##
## DESCRIPTION                                                        ##
##        cue2psc takes a cue sheet typicly generated by IDJC and     ##
##        generates a podlove simple chapter file typicly to feed     ##
##                                                      auphonic.     ##
##                                                                    ##
## USAGE                                                              ##
##        no argument                                                 ##
##               cue2psc will take the cuesheet from standard input   ##
##               usually while piping the output of another process   ##
##               into cue2psc. The output of the psc-file apears on   ##
##                      the standard output so you can pipe it into   ##
##                                                 another process.   ##
##                                                                    ##
##               Example: cat cuesheet.cue | tclsh cue2psc.tcl        ##
##                                                                    ##
##        one argument                                                ##
##               cue2pcs will take the argument as input filename.    ##
##                  The output filename will be generated from the    ##
##                    input file. On the terminal you will get the    ##
##                    output filename you can pipe somewhere else.    ##
##                                                                    ##
##               Example: tclsh cue2psc.tcl cuesheet.cue              ##
##                                                                    ##
##        two arguments                                               ##
##               cue2pcs will take the first argument as input        ##
##                 filename and the second as output filename.        ##
##                You can specify -- as input or output to set        ##
##                  standard input or output. This way you can        ##
##                  use standard input and output to a file OR        ##
##                     you can choose to use an input file but        ##
##                   output on the terminal instead of letting        ##
##                               cue2psc generate a file name.        ##
##                                                                    ##
##               Example: tclsh cue2psc.tcl cuesheet.cue auphonic.psc ##
##                                                                    ##
##                                                                    ##
########################################################################


proc fixlength { s l f } {
	#s = string
	#l = length
	#f = filler
	
	while { [string length $s] < $l } {
		set s "$f$s"
	}
	
	return $s
}

proc findoutputfilename { inputcontent inputfilename } {
	if { [regexp {\s*FILE \"([^\"]+)\"} $inputcontent fileline audiofilename] } {
		return "$audiofilename\.psc"
	} else {
		return "$inputfilename\.psc"
	}
}


if {$argc == 0} {
	set inputchannel stdin
	set inputfilename "cue2pcs"
	set outputfilename "--"
} elseif {$argc == 1} {
	set inputfilename [lindex $argv 0]
	set inputchannel [open $inputfilename r]
	set outputfilename "FINDOUTPUTFILENAME"
	
} else {
	if { [lindex $argv 0] == "--" } {
		set inputchannel stdin
	} else {
		set inputfilename [lindex $argv 0]
		set inputchannel [open $inputfilename r]
	}
	set outputfilename [lindex $argv 1]
}

# okay, arguments parsed, let's parse the inputâ€¦

set cuecontent [read -nonewline $inputchannel]
close $inputchannel

# split cue in a list of tracks
set tracklist [regexp -all -inline -indices -- {\n\s*TRACK \d+\s+[^\n]+\n} $cuecontent]
set trackarray [list]
#puts $tracklist
for { set i 0 } { $i < [llength $tracklist] } { incr i } {
	set thistrackstart [lindex [lindex $tracklist $i] 0]
	set thistrackend [string length $cuecontent]
	if { $i < [expr [llength $tracklist] -1] } {
		set thistrackend [lindex [lindex $tracklist [expr $i +1]] 0]
	}
	set thistrack [string range $cuecontent $thistrackstart $thistrackend]
	
	set this_titleline [regexp -inline {\n\s*TITLE \"([^\"]+)\"} $thistrack]
	if {[llength $this_titleline] > 1} {
		set this_title [lindex $this_titleline 1]
	} else {
		set this_title $this_titleline
	}
	
	
	set this_performerline [regexp -inline {\n\s*PERFORMER \"([^\"]+)\"} $thistrack]
	if {[llength $this_performerline] > 1} {
		set this_artist [lindex $this_performerline 1]
	} else {
		set this_artist $this_performerline
	}
	
	
	
	set this_indexline [regexp -inline {\n\s*INDEX \d+\s+(\d\d\:\d\d(\:\d\d)?)} $thistrack]
	if {[llength $this_indexline] > 1} {
		set this_starttime [lindex $this_indexline 1]
	} else {
		set this_starttime "00:00:00"
	}
	set this_starttime [regexp -inline -all {\d+} $this_starttime]
	
	if {[string first " - " $this_title] > 0} {
		set this_artist [string range $this_title 0 [string first " - " $this_title]]
		set this_title [string range $this_title [expr [string first " - " $this_title] +3] end]
	}
	
	set trackobject [list $this_starttime [string trim $this_artist] [string trim $this_title]]
	
	lappend trackarray $trackobject
		
}

if { $outputfilename == "FINDOUTPUTFILENAME" } {
	set outputfilename [findoutputfilename $cuecontent $inputfilename]
	set outputchannel [open $outputfilename w]
} elseif { $outputfilename == "--" } {
	set outputchannel stdout
} else {
	set outputchannel [open $outputfilename w]
}

for { set i 0 } { $i < [llength $trackarray] } { incr i } {
	
	set trackobject [lindex $trackarray $i]
	set trackstart [lindex $trackobject 0]
	if { [llength $trackstart] > 0 } { set trackstart_h  [lindex $trackstart 0] } else { set trackstart_h  0 }
	if { [llength $trackstart] > 1 } { set trackstart_m  [lindex $trackstart 1] } else { set trackstart_m  0 }
	if { [llength $trackstart] > 2 } { set trackstart_s  [lindex $trackstart 2] } else { set trackstart_s  0 }
	if { [llength $trackstart] > 3 } { set trackstart_ms [lindex $trackstart 3] } else { set trackstart_ms 0 }
	
	set outputline "[fixlength $trackstart_h 2 0]\:[fixlength $trackstart_m 2 0]\:[fixlength $trackstart_s 2 0]\.[fixlength $trackstart_ms 3 0] [lindex $trackobject 1] - [lindex $trackobject 2]"
	
	puts $outputchannel $outputline
}

if {$outputfilename != "--"} {
	puts $outputfilename
}
